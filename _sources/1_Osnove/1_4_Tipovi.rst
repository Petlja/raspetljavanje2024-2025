Променљиве и типови података
==============================

==================
Променљиве
==================

Текст и бројеве које желимо да користимо више пута можемо сачувати у променљиве. Променљиве служе да рачунар запамти вредности које смо му задали.
Сваку променљиву можемо да замислимо као полицу на којој нешто чувамо. У сваком тренутку то нешто можемо склонити са полице и заменити нечим другим. 
Ако имамо невероватно велики број полица, потребно нам је да им дајемо одговарајуће називе да бисмо се снашли (као што у библиотеци постоје полице за 
белетристику, поезију, крими романе, стручну литературу итд).

Променљива је дакле, простор у меморији рачунара коме смо дали неко име. Важно је да име које смо простору дали буде такво да јасно означава шта се у 
простору чува и да нам помогне да се снађемо у коду. У том простору чувамо неку учитану или израчунату вредност. Као име променљиве обично користимо 
низ слова енглеске абецеде. У именима могу још да се појаве и слова других језика, доње црте и цифре, али цифра не може да буде на првом месту.



Променљиву користимо навођењем њеног имена:

.. activecode:: promenljive1

   
   ime = "Marija"
   print("Zdravo, ja se zovem", ime)
   print("Ime", ime, "dobila sam ime po mojoj baki koja se takođe zove", ime)
   
.. questionnote::
   
   У свом радном окружењу направи фајл под називом zanimljivost_o_imenu.py и промени га тако да исписује твоје име и неку занимљивост о њему.

====================================
Како нам фиока користи?
====================================

- Можемо да прикажемо шта се налази у фиоци. За то нам користи наредба print(broj) где је broj име фиоке или променљиве

- Можемо да променимо садржај фиоке наредбом доделе "=", broj=5

- Можемо да се питамо да ли се у фиоци налази одређени податак оператором "==", на пример broj==10 (Да ли се у фиоци налази broj 10)? 


Погледај следећу анимацију:

.. image:: ../../_images/Promenljive.gif
   :width: 800 px
   :alt: alternate text



==================
Типови података
==================

Python подржава више различитих типова података који се користе за чување и рад са вредностима. 
Најчешћи типови података укључују целе бројеве, реалне бројеве (децимале), стрингове, логичке 
вредности и сложеније структуре као што су листе и речници.


- Цео број (Integer)

Цели бројеви су бројеви без децимала, као што су 1, 42 или -100. У наредном примеру користимо променљиве x, y. Прво им додељујемо вредности 10 и -3 а потом приказујемо њихов садржај односно вредности.

.. activecode:: tipovi1
   :coach:

   x = 10
   y = -3
   print(x)
   print(y)


Можете извршавати основне математичке операције са целим бројевима, као што су сабирање, одузимање, множење и дељење. У овом примеру користимо променљиве sabiranje, 
množenje, oduzimanje i deljenje за чување резултата ових операција примењених над бројевима који се налазе у променљивама a и b:

.. activecode:: tipovi2
   :coach:

   a = 5
   b = 2
   sabiranje = a + b
   mnozenje = a * b
   oduzimanje = a - b
   deljenje = a / b
   print(sabiranje, mnozenje, oduzimanje, deljenje)


- Реални број (Float)

Реални бројеви (floating point) су бројеви са децималама, попут 3.14 или -0.001.

.. activecode:: tipovi3
   :coach:

   pi = 3.14159
   tezina = 70.5
   print(pi)
   print(tezina)


Python такође подржава операције са реалним бројевима.

.. activecode:: tipovi4
   :coach:

   a = 7.5
   b = 2.3
   zbir = a + b
   proizvod = a * b
   print(zbir, proizvod)



- Стринг (String)

Стринг је низ знакова обухваћен двоструким или једноструким наводницима. Стринг може садржати слова, бројеве и симболе.

.. activecode:: tipovi5
   :coach:
   
   ime = "Marija"
   poruka = 'Zdravo, svete!'
   print(ime)
   print(poruka)
   
   
- Испис целих бројева, реалних бројева и стрингова  

   Пајтон препознаје тип податка који се додељује променљивој и та променљива постаје променљива тог типа након доделе вредности.	
   Можете исписивати различите типове података као што су целобројни, реални бројеви, стрингови и логичке променљиве.

.. activecode:: tipovi6
   :coach:

   x = 42
   y = 3.14
   ime = "Marija"
   print(x, y, ime)
   
   
- Комбиновање типова података  
   
   Користећи зарезе, можете комбиновати више различитих типова у једном исказу.

.. activecode:: tipovi7
   :coach:

   x = 42
   y = 3.14
   print("Rezultat je:", x, "a broj pi je:", y)
   
 
- Логички тип (Boolean)

Логичке вредности у Python-у могу бити само `True` или `False`. Најчешће се користе у условним исказима.

.. activecode:: tipovi8
   :coach:
   
   tacno = True
   netacno = False
   print(tacno)
   print(netacno)


Логичке вредности се добијају коришћењем оператора за поређење, као што су `==`, `!=`, `>`, `<`, `>=`, `<=`.


.. activecode:: tipovi9
   :coach:

   a = 5
   b = 10
   print(a > b)  # False
   print(a < b)  # True
   

Логички оператори упоређују две вредности и враћају `True` или `False` на основу резултата поређења. Ево неких основних оператора за поређење:

Основни оператори за поређење

1. `==` (једнако): Враћа `True` ако су обе вредности једнаке.
 
.. activecode:: tipovi15
   :coach: 
   
   x = 5
   y = 5
   rezultat = (x == y)  # Враћа True
   

2. `!=` (није једнако): Враћа `True` ако су вредности различите.
 
.. activecode:: tipovi16
   :coach: 
   
   x = 5
   y = 10
   rezultat = (x != y)  # Враћа True
   

3. `>` (веће): Враћа `True` ако је прва вредност већа од друге.

.. activecode:: tipovi17
   :coach:   
   
   x = 10
   y = 5
   rezultat = (x > y)  # Враћа True
   

4. `<` (мање): Враћа `True` ако је прва вредност мања од друге.

.. activecode:: tipovi18
   :coach:   
   
   x = 5
   y = 10
   rezultat = (x < y)  # Враћа True
   

5. `>=` (веће или једнако): Враћа `True` ако је прва вредност већа до једнака другој.
 
.. activecode:: tipovi19
   :coach:  
   
   x = 5
   y = 5
   rezultat = (x >= y)  # Враћа True
   

6. **`<=` (мање или једнако)**: Враћа `True` ако је прва вредност мања до једнака другој.

.. activecode:: tipovi20
   :coach:   
   
   x = 5
   y = 10
   rezultat = (x <= y)  # Враћа True
   

- Конверзија између типова података подразумева претварање једне врсте података у другу. У већини програмских језика, ово се ради аутоматски (имплицитна конверзија) или експлицитно помоћу посебних функција.

Ево неколико примера за експлицитну конверзију (познату као кастинг) у Пајтону:

- Конверзија из string-а у број (integer): Претварање string-а који садржи број у integer.

.. activecode:: tipovi10
   :coach:

   str_num = "123"
   int_num = int(str_num)
   print(int_num)  


- Конверзија из броја у string: Претварање integer-а у string.


.. activecode:: tipovi11
   :coach:

   int_num = 456
   str_num = str(int_num)
   print(str_num)  


- Конверзија из float-а у integer: Претварање броја са децималом у цео број (децимале се одбацују).


.. activecode:: tipovi12
   :coach:

   float_num = 9.99
   int_num = int(float_num)
   print(int_num)  


- Конверзија из integer-а у float: Претварање целог броја у број са децималом.


.. activecode:: tipovi13
   :coach:

   int_num = 7
   float_num = float(int_num)
   print(float_num)  


- Конверзија из int интегера у boolean: Претварање целог броја у boolean вредност (0 је False, све остало је True)


.. activecode:: tipovi14
   :coach:

   int_num = 0
   bool_value = bool(int_num)
   print(bool_value)  

Свака конверзија треба да буде пажљива, посебно када радимо са различитим типовима података, 
како би се избегле грешке попут неадекватних формата или губитка података.
   


Резиме

- Цео број (Integer): Бројеви без децимала, нпр. `42`, `-10`.
- Реални број (Float): Бројеви са децималама, нпр. `3.14`, `-0.01`.
- Стринг (String): Низ знакова у наводницима, нпр. `"Здраво"`, `'Python'`.
- Логички тип (Boolean): Логичке вредности `True` и `False`.


Ови типови података представљају основе за рад са подацима у Python-у.


