Итерацију кроз листу for петљом
================================


**`for` петља** је структура у програмирању која омогућава да се одређени део кода извршава више пута, пролазећи кроз елементе колекције, као што су листе, речници, стрингови и друге итерирајуће структуре података. У Пајтону, `for` петља је веома моћан алат за итерирање кроз секвенце података.

**Синтакса `for` петље:**

Основна синтакса `for` петље у Пајтону изгледа овако:

.. activecode:: forliste1
   :coach:

   for element in kolekcija:
       # Операције које желимо да извршимо са 'element'


- **`element`** је привремена променљива која узима вредност сваког елемента у колекцији (листи, речнику, стрингу итд.).
- **`kolekcija`** је итерирајућа структура (нпр. листа) кроз коју петља пролази.

**Пример `for` петље са листом:**

Ако желимо да прођемо кроз све елементе у листи и испишемо их, то можемо урадити овако:

.. activecode:: forliste2
   :coach:

   filmovi = ["Титаник", "Господар прстенова", "Матрикс"]

   for film in filmovi:
       print(film)


**Итерирање кроз листу са `for` петљом:**

Итерирање кроз листу значи да пролазимо кроз сваки елемент листе и можемо га користити у коду. Ево неколико примера како можемо итерирати кроз листу.

**Пример 1: Израчунавање суме свих бројева у листи**

.. activecode:: forliste3
   :coach:

   brojevi = [1, 2, 3, 4, 5]
   suma = 0

   for broj in brojevi:
       suma += broj

   print(f"Сума свих бројева у листи је: {suma}")


**Пример 2: Провера свих елемената листе**

.. activecode:: forliste4
   :coach:

   ocene = [5, 6, 8, 10, 9]

   for ocena in ocene:
       if ocena >= 9:
           print(f"Одлична оцена: {ocena}")


**Коришћење функције `range()` са `for` петљом:**

Функција **`range()`** генерише низ бројева и често се користи у комбинацији са `for` петљом када желимо да прођемо кроз одређени опсег бројева.

**Пример 3: Итерирање кроз бројеве**

.. activecode:: forliste5
   :coach:

   for i in range(5):
       print(i)


**Индексирање елемената листе у `for` петљи:**

Ако нам је потребно да приступимо и **индексу** елемента током итерирања, можемо користити функцију **`enumerate()`**.

**Пример 4: Приказ индекса и вредности елемената**

.. activecode:: forliste6
   :coach:
   
   filmovi = ["Titanik", "Господар прстенова", "Матрикс"]

   for indeks, film in enumerate(filmovi):
       print(f"Филм {film} је на индексу {indeks}")


**Угњежђене `for` петље:**

`for` петље могу бити угњежђене, што значи да можемо имати једну `for` петљу унутар друге. Ово је корисно када радимо са листама које садрже друге листе (нпр. 2D листе).

**Пример 5: Итерирање кроз 2D листу**

.. activecode:: forliste7
   :coach:
   
   ocene_studenata = [
       [8, 9, 10],    # Оцене првог студента
       [7, 6, 9],     # Оцене другог студента
       [10, 10, 9]    # Оцене трећег студента
   ]

   for student in ocene_studenata:
       for ocena in student:
           print(ocena, end=" ")
       print()  # Прелазак у нови ред након сваког студента



**Прекидање и настављање петље:**

Можемо користити наредбе **`break`** и **`continue`** да контролишемо ток петље:
- **`break`** прекида извршавање петље.
- **`continue`** прескаче тренутну итерацију и наставља са следећом.

**Пример 6: Прекидање петље са `break`**

.. activecode:: forliste8
   :coach:

   brojevi = [1, 2, 3, 4, 5]

   for broj in brojevi:
       if broj == 3:
           break
       print(broj)


**Пример 7: Прескакање итерације са `continue`**

.. activecode:: forliste9
   :coach:
   
   brojevi = [1, 2, 3, 4, 5]

   for broj in brojevi:
       if broj == 3:
           continue
       print(broj)




**`for` петља** је један од најчешћих и најкориснијих алата у Пајтону за итерирање кроз различите типове колекција. Њена флексибилност и једноставност у комбинацији са функцијама попут **`range()`** и **`enumerate()`**, као и са командама `break` и `continue`, чине је незаобилазном у решавању разних проблема који захтевају понављајуће операције.