Веза између for и while петље
=============================


У Пајтону постоје две главне врсте петљи: `for` петља и `while` петља. Оба типа петљи омогућавају понављање блока кода, али се разликују по томе како функционишу и када се користе. Разумевање њихове везе помаже у избору правог алата за решавање одређених проблема.

Основне разлике између `for` и `while` петље

- **`for` петља** се користи када знамо тачан broj итерација (понављања) или када итерирамо кроз колекције података (нпр. листу, речник, скуп, стринг).
- **`while` петља** се користи када понављање зависи од испуњавања одређеног услова, а broj итерација није унапред познат.

Синтакса:
- **`for` петља**:

.. activecode:: forwhile1  
   :coach:

   for елемент in секвенца:  
        # код који се извршава за сваки елемент
   

- **`while` петља**:
 
.. activecode:: forwhile2  
   :coach: 
   
	while услов:  
        # код који се извршава док је услов тачан
    

Веза између `for` и `while` петље

Иако су ове две петље различите у начину рада, многи проблеми који се решавају `for` петљом могу се решити и помоћу `while` петље, и обрнуто. Разлика је у начину на који се контролише петља.

Пример 1: `for` петља као `while` петља

Погледајмо класичан пример `for` петље која итерира кроз листу:

.. activecode:: forwhile3  
   :coach: 

   voce = ["јабука", "банана", "крушка"]  
   for vocka in voce:  
       print(vocka)


Ова петља може бити написана помоћу `while` петље тако што ћемо користити brojач за праћење индекса листе:

.. activecode:: forwhile4  
   :coach: 

   voce = ["јабука", "банана", "крушка"]  
   i = 0  
   while i < len(voce):  
       print(voce[i])  
       i += 1


У овом случају, користимо `while` петљу како бисмо прошли кроз сваки елемент листе користећи индекс. У оба примера добијамо исти резултат, иако је `for` петља природнија за рад са колекцијама.

Пример 2: `while` петља као `for` петља

Када знамо тачан broj итерација, можемо заменити `while` петљу са `for` петљом. На пример, ако желимо да испишемо brojеве од 1 до 5 користећи `while` петљу:

.. activecode:: forwhile5  
   :coach: 

   broj = 1  
   while broj <= 5:  
       print(broj)  
       broj += 1


Ова петља може бити преформулисана у `for` петљу користећи `range()` функцију:

.. activecode:: forwhile6  
   :coach: 

   for broj in range(1, 6):  
       print(broj)


Ово је елегантнији начин за решавање проблема када се унапред зна broj итерација.

Када користити `for`, а када `while` петљу?

1. **Када користити `for` петљу**:
   - Када радимо са колекцијама података (листама, стринговима, речницима, скуповима).
   - Када унапред знамо колико пута треба да поновимо блок кода.
   - Када користимо функцију `range()` за итерирање кроз секвенцу brojева.

2. **Када користити `while` петљу**:
   - Када broj понављања зависи од услова који се мења у току извршавања програма.
   - Када унапред не знамо колико итерација је потребно, већ чекамо да се испуни неки услов.
   - Када се петља може прекинути у било ком тренутку на основу променљиве вредности (нпр. кориснички унос).

Сличности између `for` и `while` петље

- **Бесконачност**: Оба петље могу креирати бесконачне петље ако се услови за излазак из петље не поставе правилно.
  
    - Бесконачна `for` петља (нпр. са `range()` без границе):

.. activecode:: forwhile7  
   :coach:      
      
   for broj in range(1, 99999999):  
      # нека радња
     
      
- Бесконачна `while` петља:
 
.. activecode:: forwhile8  
   :coach: 
      
   while True:  
       # нека радња
     

- **Контрола тока**: Оба петље могу користити контролне наредбе као што су `break` (за прекид петље) и `continue` (за прескакање тренутне итерације).

- Пример са `break`:
    
	
.. activecode:: forwhile9  
   :coach: 
   
   for broj in range(1, 10):  
       if broj == 5:  
           break  
       print(broj)
 
.. activecode:: forwhile10  
   :coach:  
     
   broj = 1  
   while broj < 10:  
       if broj == 5:  
           break  
       print(broj)  
       broj += 1
      


- **`for` петља** је погоднија када радимо са колекцијама података или када знамо тачан broj понављања.
- **`while` петља** је флексибилнија за случајеве када је потребно понављати блок кода док неки услов важи, а broj итерација није унапред познат.

Избор између `for` и `while` петље зависи од природе проблема који решавате. Оба типа петљи су моћни алати у Пајтону за понављање задатака.