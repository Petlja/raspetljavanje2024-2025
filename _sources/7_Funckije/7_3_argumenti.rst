Концепт улазних аргумената
===========================


Дефиниција:
Улазни аргументи су вредности које прослеђујемо функцији или програму како би они могли да изврше одређену радњу. Функције представљају блокове кода који извршавају одређене задатке, а улaзни аргументи су подаци који тим функцијама омогућавају да обаве тај задатак.

Пример у стварном животу:
Замислите да правите рецепт за колач. Састојци које додате у смесу су улазни аргументи. Без састојака (улазних аргумената), колач се не може направити, а врста састојака (аргумената) одређује како ће коначни производ изгледати.

Типови улазних аргумената:

1. **Неименовани (позициони) аргументи**:
   Ово су аргументи који се прослеђују функцији у тачно одређеном редоследу. Позиција сваког аргумента је битна, јер функција очекује да добије податке у унапред одређеном редоследу.

   Пример:
 
.. activecode:: argumenti1
   :coach:
 
   def predstavi_osobu(ime, godine, grad):
       print(f"{ime} има {godine} година и живи у {grad}-у.")
   
   predstavi_osobu("Петар", 30, "Београд")
   

У овом примеру:
- Функција **predstavi_osobu** прима три неименована аргумента: ime, godine и grad.
- Аргументи се прослеђују функцији у тачно дефинисаном редоследу: прво име, затим године, и на крају град. Ако промените редослед аргумената, добићете неочекивани излаз.

Излаз овог програма ће бити:  
**"Петар има 30 година и живи у Београду."**

2. **Именовани аргументи**:
   Када прослеђујемо вредности као парове кључ-вредност, тако да је јасно шта сваки аргумент представља. Ово нам омогућава да редослед аргумената не буде пресудан, јер функција тачно зна која вредност иде у који аргумент.


   Пример:
   
.. activecode:: argumenti2
   :coach:
   
   def informacije(ime, godine):
       print(f"{ime} има {godine} година.")
   
   informacije(godine=25, ime="Марија")
  

У овом случају, аргументи **ime** и **godine** су прослеђени у различитом редоследу, али функција и даље правилно препознаје која вредност припада ком аргументу.

Излаз овог програма ће бити:  
**"Марија има 25 година."**

Предности коришћења улазних аргумената:
- **Флексибилност**: Функције постају генерализоване и могу да раде са различитим улазним подацима.
- **Јасноћа кода**: Именовани аргументи побољшавају читљивост кода, јер је одмах јасно шта сваки аргумент представља.
- **Редослед улазних података**: Код позиционих аргумената је важно да улазе прослеђујемо у исправном редоследу, док код именованих аргумената можемо мењати редослед без нарушавања функционалности.


Улазни аргументи су кључни концепт у програмирању који омогућава функцијама да раде са различитим подацима и извршавају специфичне радње. Позициони аргументи се ослањају на редослед, док именовани аргументи омогућавају већу флексибилност. Разумевање оба типа аргумената је важно за ефикасно писање кода.
