Задаци за вежбање
===================

**Задатак 1:**  

Дате су две матрице \( A \) и \( B \), саберите их и испишите резултат:

.. code-block:: python
   
   A = [
       [3, 5, 7],
       [4, 6, 8]
   ]
   B = [
       [1, 2, 3],
       [4, 5, 6]
   ]


**Задатак 2:**  

Дате су две матрице A и B, извршите одузимање матрица A - B и испишите резултат:

.. code-block:: python
   
   A = [
       [9, 8],
       [7, 6] 
   ]
   B = [
       [5, 4],
       [3, 2]
   ]


**Задатак 3:**  

Дате су две матрице A и B, помножите их и испишите резултат:

.. code-block:: python
   
   A = [
       [1, 2],
       [3, 4] 
   ]
   B = [
       [2, 0],
       [1, 3]
   ]


**Задатак 4:**  

Напишите програм који рачуна транспоновану матрицу за дате матрице:

.. code-block:: python
   
   A = [
       [1, 2, 3],
       [4, 5, 6]
   ]


**Задатак 5:** 

Проблем: Преброј проходне ћелије у матрици

Замисли да имаш матрицу која представља мрежу пута. У овој матрици:

- `0` означава проходну ћелију (пут).
- `1` означава непроходну ћелију (препреку).

Твој задатак је да напишеш програм који ће избројати све проходне ћелије (`0`) у матрици и исписати укупан број проходних ћелија. 


Пример матрице:

.. code-block:: python
   
   matrica = [
       [0, 1, 0, 0],
       [1, 0, 1, 0],
       [0, 0, 0, 1],
       [1, 1, 0, 0]
   ]

Пример излаза:

.. code-block::
    
    Укупно проходних ћелија: 8






.. reveal:: solve_6 
    :showtitle: Прикажи решење
    :hidetitle: Сакриј решење

    Једноставно решење у Python-у:


    .. code-block:: python
    
        matrica = [
            [0, 1, 0, 0],
            [1, 0, 1, 0],
            [0, 0, 0, 1],
            [1, 1, 0, 0]
        ]

        broj_prohodnih = 0

        # Пролазимо кроз сваки ред у матрици
        for red in matrica:
                # Пролазимо кроз сваки елемент у реду
            for celija in red:
                if celija == 0:
                    broj_prohodnih += 1

        print("Укупно проходних ћелија:", broj_prohodnih    )



    Објашњење:

    - Користимо **угњежђену петљу**: Прва петља пролази кроз редове, а друга кроз елементе у сваком реду
    - Када пронађемо `0`, повећавамо бројач `broj_prohodnih`




  