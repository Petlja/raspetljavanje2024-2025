Чести типови проблема
=====================


**Дебаговање** је процес откривања и исправљања грешака у коду. Пајтон, као и сваки други програмски језик, има типичне проблеме са којима се програмери сусрећу током писања кода. Ова лекција ће покрити честе типове грешака и технике за њихово исправљање.

**Чести типови грешака у Пајтону:**





1. **Синтаксне грешке (SyntaxError)**
2. **Грешке током извршавања (RuntimeError)**
3. **Грешке типа (TypeError)**
4. **Индексне грешке (IndexError)**
5. **Именске грешке (NameError)**
6. **Грешке вредности (ValueError)**
7. **Кључне грешке (KeyError)**
8. **Атрибутске грешке (AttributeError)**
9. **Логичке грешке**



**1. Синтаксне грешке (SyntaxError)**

**Синтаксна грешка** настаје када код не прати правила Пајтона. Компилатор не разуме инструкцију јер је нешто неправилно написано.

**Пример:**

.. activecode:: debagovanje1
   :coach:
   
   print("Hello World)


Овде недостаје затварач наводника.

**Како исправити:**

- Исправитe синтаксу према правилима Пајтона.
  
**Исправка:**

.. activecode:: debagovanje2
   :coach:

   print("Hello World")


**2. Грешке током извршавања (RuntimeError)**

**Грешке током извршавања** се јављају током извршавања програма и често настају услед ситуација као што су дељење са нулом или непостојећи фајл.

**Пример:**


.. activecode:: debagovanje3
   :coach:

   broj = 10 / 0


Овде ће доћи до `ZeroDivisionError` јер није могуће делити број са нулом.

**Како исправити:**

- Уверите се да број са којим делите није 0.
  
**Исправка:**


.. activecode:: debagovanje4
   :coach:

   broj = 10 / 2  # или користите провере пре делјења са нулом



**3. Грешке типа (TypeError)**

**TypeError** се јавља када операција укључује неподударне типове података.

**Пример:**

.. activecode:: debagovanje5
   :coach:

   broj = 5 + "5"


Пајтон не може да сабере цео број (`int`) и стринг (`str`).

**Како исправити:**

- Конвертуј стринг у цео број или обрнуто.

**Исправка:**

.. activecode:: debagovanje6
   :coach:

   broj = 5 + int("5")

**4. Индексне грешке (IndexError)**

**IndexError** настаје када покушате да приступите елементу из листе или низа помоћу индекса који не постоји.

**Пример:**

.. activecode:: debagovanje7
   :coach:

   lista = [1, 2, 3]
   print(lista[5])


Овде нема елемента на индексу 5 јер листа има само 3 елемента (индекси 0, 1, 2).

**Како исправити:**

- Проверите да ли индекс постоји пре приступања елементу.

**Исправка:**

.. activecode:: debagovanje8
   :coach:

   lista = [1, 2, 3]
   if len(lista) > 5:
       print(lista[5])
   else:
       print("Индекс не постоји у листи.")




**5. Именске грешке (NameError)**

**NameError** се јавља када се покуша употребити променљива која није дефинисана или када се погрешно напише име променљиве или функције.

**Пример:**

.. activecode:: debagovanje9
   :coach:

   print(ime)


Ако променљива `ime` није претходно дефинисана, настаће `NameError`.

**Како исправити:**

- Уверите се да је променљива дефинисана пре коришћења.

**Исправка:**

.. activecode:: debagovanje10
   :coach:

   ime = "Јован"
   print(ime)




**6. Грешке вредности (ValueError)**

**ValueError** се јавља када функција добије исправан тип аргумента, али вредност није прихватљива.

**Пример:**

.. activecode:: debagovanje11
   :coach:

   broj = int("abc")


Овде покушавамо да конвертујемо стринг који не садржи број у цео број, што изазива `ValueError`.

**Како исправити:**

- Провери да ли је вредност исправног формата пре конверзије.

**Исправка:**

.. activecode:: debagovanje12
   :coach:

   broj_str = "123"
   broj = int(broj_str)


**7. Кључне грешке (KeyError)**

**KeyError** се јавља када покушавате да приступите неком кључу у речнику који не постоји.

**Пример:**

.. activecode:: debagovanje13
   :coach:

   reci = {"име": "Јован", "године": 30}
   print(reci["адреса"])


Овде речник нема кључ под називом `"адреса"`, што изазива `KeyError`.

**Како исправити:**

- Проверите да ли кључ постоји у речнику пре приступања.

**Исправка:**

.. activecode:: debagovanje14
   :coach:

   reci = {"име": "Јован", "године": 30}
   if "адреса" in reci:
       print(reci["адреса"])
   else:
       print("Кључ не постоји у речнику.")




**8. Атрибутске грешке (AttributeError)**

**AttributeError** се јавља када објекат нема одређени атрибут или метод који покушавамо да користимо.

**Пример:**

.. activecode:: debagovanje15
   :coach:

   lista = [1, 2, 3]
   lista.append(4)
   lista.upper()


Овде долази до `AttributeError` јер листе немају метод `upper()`.

**Како исправити:**

- Проверите који методи и атрибути су доступни за одређени објекат.

**Исправка:**

.. activecode:: debagovanje16
   :coach:

   tekst = "zdravo"
   tekst.upper()  # Ово ради јер стрингови имају метод upper()



**9. Логичке грешке**

**Логичке грешке** се јављају када програм ради без грешке, али не даје очекиване резултате. Оне су најтеже за проналажење јер не изазивају прекид програма.

**Пример:**

.. activecode:: debagovanje17
   :coach:

   brojevi = [1, 2, 3, 4, 5]
   suma = 0

   for broj in brojevi:
       suma = broj  # Грешка: требало је да додамо број на суму, а не да га заменимо

   print(suma)


Овде програм не даје грешку, али резултат суме је погрешан јер се вредност суме замењује уместо да се сабира.

**Како исправити:**

- Исправи логику програма.

**Исправка:**

.. activecode:: debagovanje18
   :coach:

   brojevi = [1, 2, 3, 4, 5]
   suma = 0
   for broj in brojevi:
       suma += broj  # Исправно сабирање

   print(suma)


**Технике дебаговања у Пајтону:**



1. **Исписивање порука (print debugging)**: Једноставно додавање `print()` израза у код на кључним местима како бисте видели ток извршавања и вредности променљивих.
   
.. activecode:: debagovanje19
   :coach:

   print(f"Тренутна вредност: {suma}")
   
   
2. **Коришћење дебагера**: Уграђени модул `pdb` у Пајтону омогућава корак-по-корак извршавање кода и праћење промена у вредностима.
   
.. activecode:: debagovanje20
   :coach:  
   
   import pdb
   pdb.set_trace()
   
   
3. **Изузеци и обрада грешака**: Коришћење блока `try-except` за хватање и обраду изузетака у коду.

.. activecode:: debagovanje21
   :coach:   
   
   try:
       broj = int("abc")
   except ValueError:
       print("Није могуће конвертовати стринг у број.")
   


Дебаговање је важан део процеса програмирања. Честе грешке као што су синтаксне, индексне, именске и логичке грешке могу се релативно лако уочити и исправити.