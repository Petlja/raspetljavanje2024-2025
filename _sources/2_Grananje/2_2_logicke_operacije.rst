=================
Логичке операције
=================

Логичке операције су операције које се извршавају над логичким вредностима. Улаз и излаз логичке операције су две логичке вредности.
Излаз је логичка вредност и зависи од улазних вредности.

Логичке операције које ћемо радити су:

- и (**and**)
- или (**or**)
- негација (**not**)

.. infonote::

    Логичке операције функционишу на исти начин као и аритметичке операције (сабирање, одузимање, множење, дељење...). Само што се уместо бројева 
	користе логичке вредности.


Операција и (and)
---------------------

Операција и се означава симболом **and**. Излаз је **True** ако су оба улаза **True**. У осталим случајевима излаз је **False**.

+----------------+-------------------+---------------+
| **Улаз 1**     | **Улаз 2**        | **Излаз**     |
+================+===================+===============+
| True           | True              | True          |
+----------------+-------------------+---------------+
| True           | False             | False         |
+----------------+-------------------+---------------+
| False          | True              | False         |
+----------------+-------------------+---------------+
| False          | False             | False         |
+----------------+-------------------+---------------+

.. questionnote::
    Да би особа могла да се такмичи на такмичењу мора да има манје од 18 година а више од 12 година.
    Написати програм који проверава да ли особа може да се такмичи на такмичењу ако је унат број година особе.

.. activecode:: logicke_operacije_1.py
    :coach:

    godine = int(input("Unesite broj godina: "))

    if godine < 18 and godine > 12:
        print("Osoba može da se takmiči na takmičenju.")
    else:
        print("Osoba ne može da se takmiči na takmičenju.")

Операција или (or)
----------------------

Операција или се означава симболом **or**. Излаз је **True** ако је бар један од улаза **True**. У осталим случајевима излаз је **False**.

+----------------+-------------------+---------------+
| **Улаз 1**     | **Улаз 2**        | **Излаз**     |
+================+===================+===============+
| True           | True              | True          |
+----------------+-------------------+---------------+
| True           | False             | True          |
+----------------+-------------------+---------------+
| False          | True              | True          |
+----------------+-------------------+---------------+
| False          | False             | False         |
+----------------+-------------------+---------------+

.. activecode:: logicke_operacije_2.py
    :coach:

    # Menjaj sledeće vrednosti i vidi kako se menja izlaz
    a = True
    b = False
    print(a or b)

Операција негација (not)
----------------------------

Операција негација се означава симболом **not**. За разлику од прошле две операције негација прима само један параметар. 
Излаз је **True** ако је улаз **False**. Излаз је **False** ако је улаз **True**.

+----------------+---------------+
| **Улаз**       | **Излаз**     |
+================+===============+
| True           | False         |
+----------------+---------------+
| False          | True          |
+----------------+---------------+

.. activecode:: logicke_operacije_3.py
    :coach:
    
    # Menjaj sledeće vrednosti i vidi kako se menja izlaz
    a = True
    print(not a)


Математичко представљање логичких операција
--------------------------------------------------------
	
	
Логички изрази у математици
===========================


Логички изрази *И*, *ИЛИ* и *НЕ* представљају основне логичке операције које се могу математички приказати на следећи начин:

.. list-table:: Логичке операције
   :header-rows: 1

   * - Операција
     - Симбол
     - Опис
     - Математички израз
     - Пример
   * - И (Конјункција)
     - `∧`
     - Резултат је тачан (1) само ако су оба услова тачна.
     - .. math:: A \land B = 1 \quad \text{ако и само ако су } A = 1 \text{ и } B = 1.
     - Ако је \( A = 1 \) и \( B = 1 \), онда \( A \and B = 1 \). Ако је бар један од њих 0, резултат је 0.
   * - ИЛИ (Дисјункција)
     - `∨`
     - Резултат је тачан ако је бар један од услова тачан.
     - .. math:: A \lor B = 1 \quad \text{ако је } A = 1 \text{ или } B = 1.
     - Ако је \( A = 1 \) и \( B = 0 \), онда \( A \or B = 1 \). Резултат је 0 само ако су оба израза 0.
   * - НЕ (Негација)
     - `¬`
     - Негација обрће вредност израза.
     - .. math:: \neg A = 1 \quad \text{ако је } A = 0, \quad \neg A = 0 \quad \text{ако је } A = 1.
     - Ако је \( A = 1 \), онда \( \neg A = 0 \); ако је \( A = 0 \), онда \( \neg A = 1.

Табела истинитости
-------------------

Следећа табела истинитости илуструје како се вредности израчунавају за логичке операције на основу вредности појединачних израза.


.. list-table:: Табела истинитости
   :header-rows: 1

   * - A
     - B
     - \( A \and B \)
     - \( A \or B \)
     - \( \neg A \)
   * - 0
     - 0
     - 0
     - 0
     - 1
   * - 0
     - 1
     - 0
     - 1
     - 1
   * - 1
     - 0
     - 0
     - 1
     - 0
   * - 1
     - 1
     - 1
     - 1
     - 0

Ево неколико примера из свакодневног живота који илуструју логичке функције *И*, *ИЛИ* и *НЕ*:

1. **Логичка функција И (Конјункција)**

   - **Пример:** Ако желите да изађете у парк, потребно је да буде лепо време *и* да имате слободно време.
     Овде услов каже да оба услова морају бити испуњена: ако је лепо време (истина) *и* ако имате слободно време (истина), онда је резултат такође истина (можете ићи у парк). Ако један од услова није испуњен (нпр., време је лоше), не можете ићи

2. **Логичка функција ИЛИ (Дисјункција)**

   - **Пример:** Ако купујете производ који је на попусту или имате купон за попуст, остварићете нижу цену.
     У овом случају довољно је да се испуни бар један од услова: или је производ на попусту (истина) *или* имате купон (истина) да бисте добили нижу цену. Чак и ако један од услова није испуњен, попуст важи ако је други испуњен. Попуст нећете добити само ако ниједан од ових услова није испуњен

3. **Логичка функција НЕ (Негација)**
	
   - **Пример:** Ако *не* ради грејање, морате укључити додатни грејач.
     Овде логичка функција *НЕ* инвертује услов. Ако је тачно да *не ради грејање* (дакле, грејање је покварено или искључено), онда морате да	укључите додатни грејач (*ДА* укључите грејач). Ако је грејање исправно, онда овај услов није испуњен и додатни грејач није потребан
	
	
	
	
	

