=======
Гранање
=======

.. raw:: html

    <style> .red {color:#aa0060; font-weight:bold; font-size:16px} </style>

.. role:: red

Посматрамо следећи проблем:

.. questionnote::

  Марија из претходне лекције је опет кренула у књижару да купи 3 свеске и 4 оловке и понела 500 динара.
  Напиши програм који за унете цене свезака и олобки испитује **да ли је Марија понела доволјно новца и ако јесте, колики кусур добија**.

Програм који решава овај проблем треба другачије да се понаша у зависности од тога да ли је Марија понела довољно новца или није.

- **Ако Марија има доволјно новца** - исписује добијен кусур
- **Ако Марија нема довољно новца** - исписује да Марија нема довољно новца

у овој лекцији показаћемо како можемо да формирамо овакве програме.


PODSETNIK: Logički izrazi
:::::::::::::::::::::::::

У прошлој лекцији поменули смо **bool** променљиве које могу да имају само две вредности: ``True`` или ``False`` које представљају **тачно** и **нетачно**.
Ове вредности се користе у **логичким изразима** који се користе prilikom **гранања**. 

Na primer: Израз :math:`3 > 2` има вредност ``True`` (односно **тачно**) јер је 3 веће од 2, док израз :math:`3 < 2` има вредност ``False`` (односно **нетачно**) јер 3 није мање од 2.


+--------------------+---------------------------+---------------------------------------+
| **Математика**     | **Пајтон**                | **Значење**                           |
+====================+===========================+=======================================+
| :math:`a < b`      | `a<b`                     | a је мање од b                        |
+--------------------+---------------------------+---------------------------------------+
| :math:`a > b`      | `a>b`                     | a је веће од b                        |
+--------------------+---------------------------+---------------------------------------+
| :math:`a <= b`     | `a<=b`                    | a је мање или једнако b               |
+--------------------+---------------------------+---------------------------------------+
| :math:`a >= b`     | `a>=b`                    | a је веће или једнако b               |
+--------------------+---------------------------+---------------------------------------+
| :math:`a == b`     | `a==b`                    | a је једнако b                        |
+--------------------+---------------------------+---------------------------------------+
| :math:`a != b`     | `a!=b`                    | a није једнако b                      |
+--------------------+---------------------------+---------------------------------------+

Покрени следећи програм и пробај да измениш бројеве и симболе. Посматрај како се вредност израза мења.

.. activecode:: grananje1
   :coach:

   print(3 > 2)

.. infonote::

  Обрати пажњу да се **=** користи када променљивој **додељујемо** вредност, а да се **==** користи за **поређење** да ли су две вредности једнаке.


Наредба if
:::::::::::

У пајтону наредба ``if`` се користи за условно извршавање делова кода. Када се команда позива дат је услов који је најчешће логички израз.
Ako je uslov tačan, izvršava se blok koda koji sledi iza komande ``if``. Ako uslov nije tačan, blok koda se preskače.

:red:`Algoritam`

.. questionnote::
  Марко је понео 100 динара у продавнцицу са намером да купи чоколадицу. Цена чоколадице се уноси на стандардни улаз. 
  Ако марко може да купи чоколадицу програм треба да испише поруку. Ако Марко не може да купи чоколадицу програм не треба да испише поруку.

.. activecode:: grananje2
  :coach:

  novac = 100
  cena = int(input("Unesite cenu čokoladice: "))

  if novac >= cena:
      print("Марко може да купи чоколадицу")

:red:`Algoritam`

Кажемо да овај програм садржи **градну**. 

- Уколико је услов тачан, тј. ако је новац који је Марко понео већи или једнак цени чоколадице, извршава се грана унутар `if` наредбе чиме се исписује порука.
- Ако услов није испуњен, блок кода унутар`if` наредбе се не извршава.

Овиме смо успели да део кода покренемо само ако је услов испуњен. Овим алатом можемо потпуно другачије кодове да покрећемо у зависности од случаја.

.. infonote::
  
    У пајтону се блокови кода означавају **индентацијом** (razmacima koji se najčešće formiraju korišćenjem dugmeta **tab**). 
    Уколико желимо да напишемо блок кода који ће се извршити уколико је услов тачан, морамо га увући у односу на `if` наредбу. 

    Пример:
  
    .. code-block:: python
  
        if uslov:
            # ovaj kod se nalazi unutar if bloka
        #ovaj kod se nalaazi van if bloka

    Kod koji se nalazi van `if` наредбе се увек извршава, док се код који се налази унутар `if` наредбе извршава само ако је услов тачан.


else
```````

Приметићемо да у прошлом случају смо имали само начин да покренемо посебан блок кода ако је услов тачан. 
Шта ако желимо да покренемо други блок кода ако услов није тачан?

У овом случају користићемо `else` наредбу.

:red:`Algoritam`

.. questionnote::
  Марко је понео 100 динара у продавницу са намером да купи чоколадицу. Цена чоколадице се уноси на стандардни улаз. 
  Ако Марко **може** да купи чоколадицу програм треба да испише поруку и колики кусур је добио. 
  Ако Марко **не може** да купи чоколадицу програм треба да испише поруку.

.. activecode:: grananje3
  :coach:

  novac = 100
  cena = int(input("Unesite cenu čokoladice: "))

  if novac >= cena:
      print("Марко може da kupi čokoladicu")
      kusur = novac - cena
      print("Kusur je:", kusur)
  else:
      print("Марко ne može da kupi čokoladicu")

:red:`Algoritam`

`else` наредба се користи за покретање блока кода који треба бити извршен ако услов је `if` наредбе неиспуњен. 
Другим речима програм ће или извршити део кода под `if` блоком или ће извршити део кода под `else` блоком. 
Ако Марко има довољно новца покренуће се први блок кода, а ако нема довољно новца покренуће се други блок кода.

.. infonote::

    Наредба `else` мора да стоји након `if` наредбе, не може стајати сама по себи.

.. infonote::
    
    наредба `else` може стајати само једном по `if` наредби. Не може се десити да имамо више `else` наредби за једну `if` наредбу.

  
.. questionnote::
  Написати програм који за унети број поена освојен на тесту исписује оцену. 

  - 5 - изнад 85 поена
  - 4 - између 70 и 85 поена
  - 3 - између 55 и 70 поена
  - 2 - између 40 и 55 поена
  - 1 - испод 40 поена



.. code-block:: grananje4

  poeni = int(input("Unesite broj poena: "))

  if poeni > 85:
      print("Ocena 5")
  if poeni >= 70:
      print("Ocena 4")
  if poeni >= 55:
      print("Ocena 3")
  if poeni >= 40:
      print("Ocena 2")
  if poeni < 40:
      print("Ocena 1")

elif
````
  



